syntax = "proto3";
package module;

message MsgControl {
    message MsgBody {
        string title = 1;
        string content = 2;
        string url = 3;
    }
    repeated int64 ids = 1;
    MsgBody body = 2;
}

message Req {
}

message Resp {
    enum SendStatus {
        SUCCESS = 0;
        ERROR = 1;
    }
    SendStatus status = 1;
    string detail = 2;
}

message MsgControlResp {
    map<int64, Resp> resps = 1;
}

message ModuleImportReq {
    bytes data = 1;
}

message ModuleImportResp {
    Resp resp = 1;
    repeated UrlRedirect redirect = 2;

    message UrlRedirect {
        int64 id = 1;
        string pattern = 2;
        URL_TYPE url_type = 3;
        enum URL_TYPE {
            GET = 0;
            POST = 1;
        }
    }
}

message SettingReq {
    string module = 1;
    string encode_form = 2;
}

message UserSettingReq {
    SettingReq req = 1;
    int64 user = 2;
}

message SettingResp {
    Resp resp = 1;
    repeated Setting settings = 2;
    message Setting {
        string module = 1;
        string data = 2;
    }
}

message RedirectData {
    int64 id = 1;
    map<string, string> form = 2;
    bytes data = 3;
}

message RedirectResp {
    Resp resp = 1;
    string content_type = 2;
    bytes data = 3;
}

service NotifyService {
    rpc SendMessage(MsgControl) returns (MsgControlResp) {}
    rpc Init(Req) returns (ModuleImportResp) {}
    rpc ModuleImport(ModuleImportReq) returns (ModuleImportResp) {}
    rpc GlobalSettingRequest(Req) returns (SettingResp) {}
    rpc UserSettingRequest(Req) returns (SettingResp) {}
    rpc GlobalSettingCommit(SettingReq) returns (Resp) {}
    rpc UserSettingCommit(UserSettingReq) returns (Resp) {}
    rpc Redirect(RedirectData) returns (RedirectResp) {}
}
